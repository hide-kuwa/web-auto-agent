const {chromium}=require('playwright');const fs=require('fs');const path=require('path');const specPath=path.resolve('.agent/tests/home.json');const outDir=path.resolve('.agent/artifacts');if(!fs.existsSync(outDir))fs.mkdirSync(outDir,{recursive:true});const spec=JSON.parse(fs.readFileSync(specPath,'utf8'));async function run(){const ctx=await chromium.launchPersistentContext(path.resolve('.agent/user-data'),{headless:false,viewport:{width:spec.viewport.width,height:spec.viewport.height},recordVideo:{dir:path.join(outDir,'videos')}});const page=await ctx.newPage();await page.goto(spec.start,{waitUntil:'domcontentloaded'});for(const a of spec.actions){if(a.type==='visit')await page.goto(spec.start+a.url,{waitUntil:'domcontentloaded'});else if(a.type==='click'){await page.waitForSelector(a.selector,{state:'visible'});await page.click(a.selector);}else if(a.type==='fill'){await page.waitForSelector(a.selector,{state:'visible'});await page.fill(a.selector,a.value||'');}else if(a.type==='press'){await page.keyboard.press(a.key);}else if(a.type==='waitFor'){await page.waitForTimeout(a.ms||500);}else if(a.type==='assertText'){await page.waitForSelector(a.selector,{state:'visible'});const t=await page.textContent(a.selector);if(String(t).trim()!==a.equals)throw new Error('assertText failed: '+a.selector);}else if(a.type==='screenshot'){const p=path.join(outDir,(a.name||'shot')+'.png');await page.screenshot({path:p,fullPage:true});}}console.log('OK: headed test finished. Artifacts in .agent/artifacts');await ctx.close();}run().catch(e=>{console.error(e);process.exit(1);});