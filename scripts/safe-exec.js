const cp=require('child_process');const fs=require('fs');const rl=require('readline');const policies=JSON.parse(fs.readFileSync('.agent/policies.json','utf8'));const pending=JSON.parse(fs.readFileSync('.agent/changes/pending.json','utf8'));function isDenied(cmd){return policies.deny.some(x=>cmd.toLowerCase().includes(x.toLowerCase()));}function isAllowed(cmd){return policies.allow.some(x=>cmd.split(/\s+/)[0]===x);}function ask(q){return new Promise(r=>{const i=rl.createInterface({input:process.stdin,output:process.stdout});i.question(q,a=>{i.close();r(a);});});}async function main(){console.log('Changeset: '+pending.id+' :: '+pending.summary);console.log('Commands:');pending.commands.forEach((c,i)=>console.log((i+1)+'. '+c));for(const c of pending.commands){if(isDenied(c)){console.log('SKIP (denied): '+c);continue;}if(!isAllowed(c)){console.log('HOLD (not in allow): '+c);const a=(await ask('Approve this command? [y/N] ')).trim().toLowerCase();if(a!=='y')continue;}console.log('EXEC: '+c);try{cp.execSync(c,{stdio:'inherit',timeout:((policies.timeoutSec||120)*1000),env:{...process.env,HUSKY:'0',CI:'1'}});}catch(e){console.error('FAILED: '+c);process.exit(1);}}console.log('Done.');}main();