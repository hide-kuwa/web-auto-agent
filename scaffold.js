const fs = require('fs');
const path = require('path');
function w(p,c){fs.mkdirSync(path.dirname(p),{recursive:true});fs.writeFileSync(p,c,'utf8');}
function updatePkg(){let pkg={};try{pkg=JSON.parse(fs.readFileSync('package.json','utf8'));}catch{}pkg.private=true;pkg.dependencies=pkg.dependencies||{};if(!pkg.dependencies.playwright)pkg.dependencies.playwright='^1.46.0';pkg.scripts=Object.assign(pkg.scripts||{},{preview:'node scripts/preview.js','test:headed':'node scripts/run-headed.js',apply:'node scripts/safe-exec.js','git:pr':'node scripts/gitworker.js'});fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));}
updatePkg();
w('app/index.html','<!doctype html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>TRIP PLAN</title></head><body><h1>Hello TRIP PLAN</h1><a href="/about.html">About</a></body></html>');
w('app/about.html','<!doctype html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>About</title></head><body><h1>About</h1><a href="/">Back</a></body></html>');
w('.agent/tests/home.json',JSON.stringify({name:'home-basic',start:'http://localhost:5173',viewport:{width:1280,height:800},recordVideo:true,screenshots:['home','about'],actions:[{type:'visit',url:'/'},{type:'assertText',selector:'h1',equals:'Hello TRIP PLAN'},{type:'screenshot',name:'home'},{type:'click',selector:"a[href='/about.html']"},{type:'assertText',selector:'h1',equals:'About'},{type:'screenshot',name:'about'}]},null,2));
w('.agent/policies.json',JSON.stringify({allow:['git','node','npm','npx','echo'],deny:['rm','sudo','shutdown','format','mkfs','powershell -Command Remove-Item','cmd /c del'],timeoutSec:120},null,2));
w('.agent/changes/pending.json',JSON.stringify({id:'2025-08-10-001',summary:'Create minimal TRIP PLAN pages',commands:['echo build-step-placeholder','npm run preview']},null,2));
w('scripts/preview.js',"const http=require('http');const fs=require('fs');const path=require('path');const root=path.resolve('app');const port=5173;function send(res,code,body,type){res.writeHead(code,{'Content-Type':type||'text/plain; charset=utf-8'});res.end(body);}function serveFile(res,p){if(!fs.existsSync(p))return false;const ext=path.extname(p).toLowerCase();const m={'.html':'text/html; charset=utf-8','.js':'text/javascript; charset=utf-8','.css':'text/css; charset=utf-8','.json':'application/json; charset=utf-8','.png':'image/png','.jpg':'image/jpeg','.svg':'image/svg+xml'}[ext]||'application/octet-stream';send(res,200,fs.readFileSync(p),m);return true;}const server=http.createServer((req,res)=>{const url=decodeURIComponent(req.url.split('?')[0]);const file=url==='/'?'index.html':url.replace(/^\\//,'');const p=path.join(root,file);if(serveFile(res,p))return;const fb=path.join(root,'index.html');if(fs.existsSync(fb))serveFile(res,fb);else send(res,404,'Not Found');});server.listen(port,()=>console.log('Preview: http://localhost:'+port));");
w('scripts/run-headed.js',"const {chromium}=require('playwright');const fs=require('fs');const path=require('path');const specPath=path.resolve('.agent/tests/home.json');const outDir=path.resolve('.agent/artifacts');if(!fs.existsSync(outDir))fs.mkdirSync(outDir,{recursive:true});const spec=JSON.parse(fs.readFileSync(specPath,'utf8'));async function run(){const ctx=await chromium.launchPersistentContext(path.resolve('.agent/user-data'),{headless:false,viewport:{width:spec.viewport.width,height:spec.viewport.height},recordVideo:{dir:path.join(outDir,'videos')}});const page=await ctx.newPage();await page.goto(spec.start,{waitUntil:'domcontentloaded'});for(const a of spec.actions){if(a.type==='visit')await page.goto(spec.start+a.url,{waitUntil:'domcontentloaded'});else if(a.type==='click'){await page.waitForSelector(a.selector,{state:'visible'});await page.click(a.selector);}else if(a.type==='fill'){await page.waitForSelector(a.selector,{state:'visible'});await page.fill(a.selector,a.value||'');}else if(a.type==='press'){await page.keyboard.press(a.key);}else if(a.type==='waitFor'){await page.waitForTimeout(a.ms||500);}else if(a.type==='assertText'){await page.waitForSelector(a.selector,{state:'visible'});const t=await page.textContent(a.selector);if(String(t).trim()!==a.equals)throw new Error('assertText failed: '+a.selector);}else if(a.type==='screenshot'){const p=path.join(outDir,(a.name||'shot')+'.png');await page.screenshot({path:p,fullPage:true});}}console.log('OK: headed test finished. Artifacts in .agent/artifacts');await ctx.close();}run().catch(e=>{console.error(e);process.exit(1);});");
w('scripts/safe-exec.js',"const cp=require('child_process');const fs=require('fs');const rl=require('readline');const policies=JSON.parse(fs.readFileSync('.agent/policies.json','utf8'));const pending=JSON.parse(fs.readFileSync('.agent/changes/pending.json','utf8'));function isDenied(cmd){return policies.deny.some(x=>cmd.toLowerCase().includes(x.toLowerCase()));}function isAllowed(cmd){return policies.allow.some(x=>cmd.split(/\\s+/)[0]===x);}function ask(q){return new Promise(r=>{const i=rl.createInterface({input:process.stdin,output:process.stdout});i.question(q,a=>{i.close();r(a);});});}async function main(){console.log('Changeset: '+pending.id+' :: '+pending.summary);console.log('Commands:');pending.commands.forEach((c,i)=>console.log((i+1)+'. '+c));for(const c of pending.commands){if(isDenied(c)){console.log('SKIP (denied): '+c);continue;}if(!isAllowed(c)){console.log('HOLD (not in allow): '+c);const a=(await ask('Approve this command? [y/N] ')).trim().toLowerCase();if(a!=='y')continue;}console.log('EXEC: '+c);try{cp.execSync(c,{stdio:'inherit',timeout:((policies.timeoutSec||120)*1000),env:{...process.env,HUSKY:'0',CI:'1'}});}catch(e){console.error('FAILED: '+c);process.exit(1);}}console.log('Done.');}main();");
w('scripts/gitworker.js',"const cp=require('child_process');const fs=require('fs');function sh(cmd){return cp.execSync(cmd,{stdio:'pipe'}).toString().trim();}function openUrl(u){const p=process.platform;if(p==='win32')cp.exec('start \"\" \"'+u+'\"');else if(p==='darwin')cp.exec('open \"'+u+'\"');else cp.exec('xdg-open \"'+u+'\"');}function slug(s){return s.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').slice(0,24);}function parseRemote(u){if(u.startsWith('git@')){const m=u.match(/:(.+)\\/(.+)\\.git$/);return {owner:m[1],repo:m[2]};}if(u.startsWith('https://')){const m=u.match(/github\\.com\\/(.+)\\/(.+)\\.git$/);return {owner:m[1],repo:m[2]};}throw new Error('unsupported remote url');}function now(){const d=new Date();const z=n=>String(n).padStart(2,'0');return `${d.getFullYear()}${z(d.getMonth()+1)}${z(d.getDate())}-${z(d.getHours())}${z(d.getMinutes())}`;}function main(){const pend=JSON.parse(fs.readFileSync('.agent/changes/pending.json','utf8'));try{sh('git rev-parse --is-inside-work-tree');}catch{console.error('not a git repo');process.exit(1);}const remote=parseRemote(sh('git config --get remote.origin.url'));sh('git fetch --all');try{sh('git switch main');}catch{sh('git checkout -b main');}try{sh('git pull --ff-only');}catch{}const branch='feature/'+now()+'-'+slug(pend.summary||'change');try{sh('git checkout -b \"'+branch+'\"');}catch{sh('git switch \"'+branch+'\"');}sh('git add -A');try{sh('git commit -m \"'+(pend.summary||'update')+' [changeset:'+pend.id+']\"');}catch{}sh('git push -u origin \"'+branch+'\"');const pr='https://github.com/'+remote.owner+'/'+remote.repo+'/compare/'+branch+'?expand=1';console.log('Open PR:',pr);openUrl(pr);}main();");
fs.mkdirSync('.agent/artifacts/videos',{recursive:true});
console.log('OK: scaffolded.');
